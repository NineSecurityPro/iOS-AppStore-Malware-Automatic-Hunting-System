#include "stdafx.h"
#include "ItunesFunction.h"
#include <stdio.h>

PFN_CFGetAllocator pfn_CFGetAllocator = NULL;
PFN_CFRelease pfn_CFRelease = NULL;
PFN_CFStringGetCStringPtr pfn_CFStringGetCStringPtr = NULL;
PFN_CFStringGetTypeID pfn_CFStringGetTypeID = NULL;
PFN_CFGetTypeID pfn_CFGetTypeID = NULL;

PFN_CFDictionaryGetTypeID pfn_CFDictionaryGetTypeID = NULL;
PFN_CFDictionaryGetKeysAndValues pfn_CFDictionaryGetKeysAndValues = NULL;
PFN_CFDictionaryGetCount pfn_CFDictionaryGetCount = NULL;
PFN_CFDictionaryGetValue pfn_CFDictionaryGetValue = NULL;

PFN_cert_stuff_for_get_object_0 pfn_cert_stuff_for_get_object_0 = NULL;
PFN_cert_stuff_for_get_num2 pfn_cert_stuff_for_get_num2 = NULL;
PFN_cert_stuff_for_get_object pfn_cert_stuff_for_get_object = NULL;
PFN_cert_stuff_get_object pfn_cert_stuff_get_object = NULL;
PFN_cert_init pfn_cert_init = NULL;
PFN_get_guid pfn_get_guid = NULL;
PFN_ActionSignature pfn_ActionSignature = NULL;
PFN_Release_Mem pfn_Release_Mem = NULL;
PFN_kbsync pfn_kbsync = NULL;
PFN_setkeybag pfn_setkeybag = NULL;

PCRITICAL_SECTION g_pcriti_lock;
ULONG g_sessionID = 0;
ULONG g_keybagID = 0;
ULONG g_key2[6] = { 0 };

extern "C" __declspec(dllexport) BOOL InitFunctions()
{
	SetEnvironmentVariable(L"PATH", L"%PATH%;"
		L"C:\\Program Files (x86)\\Common Files\\Apple\\Apple Application Support;"
		L"C:\\Program Files (x86)\\iTunes;"
		L"C:\\Program Files (x86)\\Common Files\\Apple\\CoreFP;"
		L"C:\\Program Files (x86)\\Common Files\\Apple\\Apple Application Support;");

	if (!LoadLibrary(L"CoreFoundation.dll") || !LoadLibrary(L"iTunes.dll"))
	{
		return FALSE;
	}

	SetCurrentDirectory(L"C:\\Program Files (x86)\\iTunes");

    HMODULE hModCF = GetModuleHandle(L"CoreFoundation.dll");
    if (!hModCF) return FALSE;

    pfn_CFStringGetCStringPtr = (PFN_CFStringGetCStringPtr)GetProcAddress(hModCF, "CFStringGetCStringPtr");
    if (!pfn_CFStringGetCStringPtr) return FALSE;

    pfn_CFGetAllocator = (PFN_CFGetAllocator)GetProcAddress(hModCF, "CFGetAllocator");
    if (!pfn_CFGetAllocator) return FALSE;

    pfn_CFRelease = (PFN_CFRelease)GetProcAddress(hModCF, "CFRelease");
    if (!pfn_CFRelease) return FALSE;

    pfn_CFStringGetTypeID = (PFN_CFStringGetTypeID)GetProcAddress(hModCF, "CFStringGetTypeID");
    if (!pfn_CFStringGetTypeID) return FALSE;

    pfn_CFGetTypeID = (PFN_CFGetTypeID)GetProcAddress(hModCF, "CFGetTypeID");
    if (!pfn_CFGetTypeID) return FALSE;

    pfn_CFDictionaryGetTypeID = (PFN_CFDictionaryGetTypeID)GetProcAddress(hModCF, "CFDictionaryGetTypeID");
    if (!pfn_CFDictionaryGetTypeID) return FALSE;

    pfn_CFDictionaryGetKeysAndValues = (PFN_CFDictionaryGetKeysAndValues)GetProcAddress(hModCF, "CFDictionaryGetKeysAndValues");
    if (!pfn_CFDictionaryGetKeysAndValues) return FALSE;

    pfn_CFDictionaryGetCount = (PFN_CFDictionaryGetCount)GetProcAddress(hModCF, "CFDictionaryGetCount");
    if (!pfn_CFDictionaryGetCount) return FALSE;

    pfn_CFDictionaryGetValue = (PFN_CFDictionaryGetValue)GetProcAddress(hModCF, "CFDictionaryGetValue");
    if (!pfn_CFDictionaryGetValue) return FALSE;

//    HMODULE hModit = GetModuleHandle(CItunesInterface::getItunesDLLPath());
    HMODULE hModit = GetModuleHandle(L"iTunes.dll");
    if (!hModit) return FALSE;
	printf("\nhModit= %x\n", (unsigned int)hModit);

    ULONG_PTR ulFuncAddr = (ULONG_PTR)hModit + (0x6F9DD170 - 0x6F7B0000); //22D170
    assert(IsBadReadPtr((void *)ulFuncAddr, 1) == 0);
    pfn_cert_stuff_for_get_object_0 = (PFN_cert_stuff_for_get_object_0)ulFuncAddr;
    if (!pfn_cert_stuff_for_get_object_0) return FALSE;

    ulFuncAddr = (ULONG_PTR)hModit + (0x707763D0 - 0x6F7B0000);//FC63D0
    assert(IsBadReadPtr((void *)ulFuncAddr, 1) == 0);
    pfn_cert_stuff_for_get_num2 = (PFN_cert_stuff_for_get_num2)ulFuncAddr;
    if (!pfn_cert_stuff_for_get_num2) return FALSE;

    ulFuncAddr = (ULONG_PTR)hModit + 0x22D290;
    assert(IsBadReadPtr((void *)ulFuncAddr, 1) == 0);
    pfn_cert_stuff_for_get_object = (PFN_cert_stuff_for_get_object)ulFuncAddr;
    if (!pfn_cert_stuff_for_get_object) return FALSE;

    ulFuncAddr = (ULONG_PTR)hModit + 0x6B05F0;
    assert(IsBadReadPtr((void *)ulFuncAddr, 1) == 0);
    pfn_cert_stuff_get_object = (PFN_cert_stuff_get_object)ulFuncAddr;
    if (!pfn_cert_stuff_get_object) return FALSE;

    ulFuncAddr = (ULONG_PTR)hModit + 0xFC0C70;
    assert(IsBadReadPtr((void *)ulFuncAddr, 1) == 0);
    pfn_cert_init = (PFN_cert_init)ulFuncAddr;
    if (!pfn_cert_init) return FALSE;

    ulFuncAddr = (ULONG_PTR)hModit + (0x6DFED4F0 - 0x6DDC0000); //22D4F0
    assert(IsBadReadPtr((void *)ulFuncAddr, 1) == 0);
    pfn_get_guid = (PFN_get_guid)ulFuncAddr;
    if (!pfn_get_guid) return FALSE;

    ulFuncAddr = (ULONG_PTR)hModit + (0x71166080 - 0x70190000);
    assert(IsBadReadPtr((void *)ulFuncAddr, 1) == 0);
    pfn_ActionSignature = (PFN_ActionSignature)ulFuncAddr;
    if (!pfn_ActionSignature) return FALSE;

    ulFuncAddr = (ULONG_PTR)hModit + (0x7114FD90 - 0x70190000);
    assert(IsBadReadPtr((void *)ulFuncAddr, 1) == 0);
    pfn_Release_Mem = (PFN_Release_Mem)ulFuncAddr;
    if (!pfn_Release_Mem) return FALSE;

    ulFuncAddr = (ULONG_PTR)hModit + (0x6EAA9EF0 - 0x6DAD0000);
    assert(IsBadReadPtr((void *)ulFuncAddr, 1) == 0);
    pfn_kbsync = (PFN_kbsync)ulFuncAddr;
    if (!pfn_kbsync) return FALSE;

    ulFuncAddr = (ULONG_PTR)hModit + (0x6FE07800 - 0x6EE40000);
    assert(IsBadReadPtr((void *)ulFuncAddr, 1) == 0);
    pfn_setkeybag = (PFN_setkeybag)ulFuncAddr;
    if (!pfn_setkeybag) return FALSE;

    return TRUE;
}

extern "C" __declspec(dllexport) BOOL InitKeyBagID()
{
	ULONG pstuff0[6] = { 0 };
	ULONG pstuff[6] = { 0 };
	bool bErr = FALSE;

	//enter
	__asm
	{
		pushad
		pushfd
		lea edi, pstuff0
		call pfn_cert_stuff_for_get_object_0
		mov bErr, al
		popfd
		popad
	}
	if (!bErr)
		return FALSE;

	if (!pfn_cert_stuff_for_get_object(pstuff))
		return FALSE;
	//leave

	const char scinfo_path[] = "C:\\ProgramData\\Apple Computer\\iTunes\\SC Info";
	int err = pfn_cert_stuff_for_get_num2(pstuff0, pstuff, scinfo_path, &g_keybagID); //ËøôÈáåÂæóÂà∞Áö?g_kbsyncID ÊòØÂê¶Â≠òÂú®Êó∂ÊïàÊÄßÔºü
	if (err != 0)
		return FALSE;

	return TRUE;
}

extern "C" __declspec(dllexport) BOOL InitSessionID()
{
	pfn_cert_stuff_for_get_object(g_key2);
	ULONG *pobject = new ULONG[2]; //mem fake
	pobject[0] = 0;
	pobject[1] = 0;
	int err = pfn_cert_stuff_get_object(g_key2, pobject); //Ëøô‰∏™ÂØπË±°ÊòØÂçïÂÆû‰æãÂØπË±°ÔºüËøô‰∏™ÂØπË±°ÈáåÈù¢Â≠òÊî?g_sessionID Âíå‰∏¥ÁïåÂå∫
	if (err != 0)
	{
		return FALSE;
	}

	ULONG *plock = (ULONG *)pobject[0];
	g_pcriti_lock = (PCRITICAL_SECTION)&plock[3];
	g_sessionID = plock[0x24 / 4];
	return TRUE;
}


extern "C" __declspec(dllexport) ULONG ExchangeCertificate(LPBYTE InData, ULONG InLength, LPBYTE OutData, ULONG OutLength)
{
	LPBYTE pout = NULL;
	ULONG outLen = 0;
	ULONG flag = 1;

	int err = pfn_cert_init(200, g_key2, g_sessionID, InData, InLength, &pout, &outLen, &flag);
	if (err != 0) {
		return 0;
	}

	memcpy_s(OutData, OutLength, pout, outLen);
	pfn_Release_Mem(pout);

	return outLen;
}

extern "C" __declspec(dllexport) ULONG ActionSignature(unsigned char *pBody, size_t nBody, char* OutData, ULONG OutLength)
{
	LPBYTE pout = NULL;
	ULONG outLen = 0;
	int err = pfn_ActionSignature(g_sessionID, pBody, nBody, &pout, &outLen);
	if (err != 0 || pout == NULL)
	{
		return 0;
	}

	// strncpy_s(OutData, outLen, (const char*)pout, OutLength);
	memcpy_s(OutData, OutLength, pout, outLen);
	pfn_Release_Mem(pout);

	return outLen;
}

extern "C" __declspec(dllexport) ULONG GetKBSync(ULONGLONG dsid, char* OutData, ULONG OutLength)
{
	LPBYTE pout = NULL;
	ULONG outLen = 0;
	int err = pfn_kbsync(g_keybagID, dsid, 0, 1, &pout, &outLen);
	if (err != 0)
	{
		return 0;
	}

	// strncpy_s(OutData, outLen, (const char*)pout, OutLength);
	memcpy_s(OutData, OutLength, pout, outLen);
	pfn_Release_Mem(pout);

	return outLen;
}


extern "C" __declspec(dllexport) int GetGUID(LPBYTE OutData)
{
	void* allocator = pfn_CFGetAllocator(NULL);
	if (!allocator) return false;

	void *ref = pfn_get_guid(allocator);//dot forget call pfn_CFRelease
	if (!ref) return false;

	const char * guid = _strdup(pfn_CFStringGetCStringPtr(ref, 0x500));
	pfn_CFRelease(ref);
	memcpy_s(OutData, strlen(guid), guid, strlen(guid));
	printf("guid = %s\n", guid);

	return strlen(guid);
}

/*

for (size_t i = 0; i < 6; i++)
{
printf("pstuff0[%d]= %d, pstuff[%d]= %d\n", i, (unsigned long)pstuff0[i], i, (unsigned long)pstuff[i]);
}

-------------------


for (size_t i = 0; i < 6; i++)
{
printf("g_key2[%d]= %d\n", i, (unsigned long)g_key2[i]);
}

-----------------


for (size_t i = 0; i < 10; i++)
{
printf("plock[%d]= %d\n", i, (unsigned long)plock[i]);
}

*/