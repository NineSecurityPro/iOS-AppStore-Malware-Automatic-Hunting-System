/**
 * Copyright (c) 2017 moony li of @Flyic.
 *2017-05-27

 2017-09-11 implementation
**/



'use strict';


(function () {

 
exports.parseXML = function(inputBuf) 
{
  String.prototype.replaceAll = function(search, replacement) 
  //function replaceAll(search, replacement) 
  {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
  };
  
  var buf = inputBuf;
  return parsePlist(buf);
};

function parseXML2Json(buf) 
{
  var parser = require('xml2json');
  var xml = buf;
  var json = parser.toJson(xml);
  console.log("to json -> %s", json);

}

function parsePlistPatch(buf) 
{

   var plist = require('plist-merge-patch');
   var plistObj = plist.parse(buf);
   return plistObj;
}

function parseNodePlistNative(buf) 
{

   var plist = require('plist-native');
   var plistObj = plist.parse(buf);
   return plistObj;
}

function parseSimplePlist(buf) 
{
   var plist = require('simple-plist');
   var plistObj = plist.parse(buf);
   return plistObj;
}

function test_plist()
{
  var plist = require('plist');
 
var xml =
  '<?xml version="1.0" encoding="UTF-8"?>' +
  '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' +
  '<plist version="1.0">' +
    '<key>metadata</key>' +
    '<dict>' +
      '<key>bundle-identifier</key>' +
      '<string>com.company.app</string>' +
      '<key>bundle-version</key>' +
      '<string>0.1.1</string>' +
      '<key>kind</key>' +
      '<string>software</string>' +
      '<key>title</key>' +
      '<string>AppName</string>' +
    '</dict>' +
  '</plist>';
 
console.log(plist.parse(xml));

}

function parsePlist(buf) 
{

   var plist = require('plist');
   var plistObj = plist.parse(buf);
   return plistObj;
}

function test_libxmljs()
{
  var libxmljs = require("libxmljs");
var xml =  '<?xml version="1.0" encoding="UTF-8"?>' +
           '<root>' +
               '<child foo="bar">' +
                   '<grandchild baz="fizbuzz">grandchild content</grandchild>' +
               '</child>' +
               '<sibling>with content!</sibling>' +
           '</root>';

var xmlDoc = libxmljs.parseXml(xml);

var gchild = xmlDoc.get('//grandchild');

var children = xmlDoc.root().childNodes();
var child = children[0];

console.log(child.attr('foo').value()); // prints "bar"
}

function parseXML_xmldoc(buf) 
{
  var libxmljs = require("libxmljs");
  var xmlDoc = libxmljs.parseXml(buf);
  xmlDoc

}


function test_xmldoc()
{

var XmlDocument = require('xmldoc').XmlDocument;
var xmlString = '<suggestions><book title="Twilight"/><book title="Twister"/></suggestions>';

var suggestions = new XmlDocument(xmlString);
console.log("Parsed: \n%s", suggestions);
suggestions.eachChild(function(book) {
  console.log("Found book with title: '%s'", book.attr.title);
  console.log("==> The <book> tag started at position %s and the complete element ended at line %s, column %s, position %s.", book.startTagPosition, book.line, book.column, book.position);
});

var fs = require('fs'),
    path = require('path');

  fs.readFile(path.join(__dirname, "test.xml"), 'utf8', function (err,data) {
  
  if (err) {
    return console.log(err);
  }

  // Parse the XML
  var results = new XmlDocument(data);

  // Demonstrate toString() with an option to abbreviate long strings and compress the output
  console.log("Parsed: \n%s", results.toString({trimmed:true, compressed:true}));

  // Pull out the <books> node
  var books = results.childNamed("authors");

  // Demonstrate firstChild/lastChild
  //console.log("First book has ISBN '%s', last book has ISBN '%s'", books.firstChild.attr.isbn, books.lastChild.attr.isbn);

  // Print out the ISBNs
  books.eachChild(function (book) {
    console.log("Found book with ISBN '%s'", book.attr.isbn);
  });

  // Look for all children with a certain node name
  var allBooks = books.childrenNamed("book");

  // The result is an array of <book> XmlElement instances
  console.log("Found %s books.", allBooks.length);

  // Search for a particular book
  var twilight = books.childWithAttribute("isbn","478-2-23-765712-2");

  // Result is a single XmlElement instance for <book>
  console.log("Title of book with given ISBN: '%s'", twilight.valueWithPath("title"));

  return null;
});
}
//npm install xmldoc
//npm install buffer stream xmldoc
function parseXML_xmldoc(buf) 
{
  var XmlDocument = require('xmldoc').XmlDocument;
  var results = new XmlDocument(buf);
  //console.log("Parsed results: \n%s", results.toString({trimmed:false, compressed:false}));


  var arrays = results.childNamed("dict");
  //console.log("Parsed results: \n%s", arrays.toString({trimmed:false, compressed:false}));  
  //var dicts = arrays.childrenNamed("dict");
  //console.log("array.dicts.length:'%d'", dicts.length);

  arrays.eachChild(function (item) {
    console.log("dict item:'%s'", item);
  });

  //array.eachChild(function (item) {
   //console.log("‘%s’:'%s'",item.name, item.value);
  //});
  //console.log("Array.name: '%s'",array.firstChild);

}

//npm install @rgrove/parse-xml
function parseXML_parse_xml(buf) 
{
  const parseXml = require('@rgrove/parse-xml');
  //var xmlObj = parseXml('<kittens fuzzy="yes">I like fuzzy kittens.</kittens>');
  var xmlObj = parseXml(buf);
  console.log(xmlObj);
};

//npm install htmlparser2
function parseXML_htmlparser2(buf) 
{
   //buf = "Xyz <script type='text/javascript'>var foo = '<<bar>>';</ script>";
   //console.log(buf);
   var ret;
   var htmlparser = require("htmlparser2");
   var parser = new htmlparser.Parser({

        onopentag: function(name, attribs){
            console.log("\r\nname:"+name);
            //if(name === "array" && attribs.type === "tag")
            if(name === "array" )
            {
              //var childrenLen = attribs.children.length;
              console.log("array length is:"+attribs.length);
            } 
            //if(name === "script" && attribs.type === "text/javascript"){
            //    console.log("JS! Hooray!");
            //}
        },
        onattribute: function(name, value)
        {
          console.log("\r\nonattribute\tname:"+name+"\tvalue:"+value); 
        },
        onprocessinginstruction: function(name,  data)
        {
          console.log("\r\nonprocessinginstruction\tname:"+name+"\tdata:"+data); 
        },
        ontext: function(text){
            //console.log("\r\ntext:"+text);
        },
        onclosetag: function(tagname){
            //console.log("\r\nonclosetag:"+tagname);
            //if(tagname === "script"){
            //    console.log("That's it?!");
            //}
        }
    }, {decodeEntities: true});
    parser.write(buf);
    parser.end();

    return ret;
};

})();


 