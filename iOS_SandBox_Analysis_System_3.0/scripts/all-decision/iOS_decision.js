/**
 * Copyright (c) 2017 moony li of @Flyic.
 *2017-05-27

 2017-09-18 implementation
**/

'use strict';
(function () {


var chalk = require('chalk');
var pd = require('pretty-data').pd;
var decision_conf = require("./decision_conf.js");


//npm install moment --save
var moment = require("moment");

exports.main = function() 
{

	var fs = require('fs');
	var momentBegin = moment();
	console.log(chalk.green(
		"\r\n\t\t\tTrendMicro iOS dynamic sandbox Decision System \r\n\t\t\tsilvermoonsecurity, moony @Flyic 2017 "+moment().format("YYYY-MM-DD HH:mm:ss") ));

	var mainJSPath = __dirname;
	var jsonLogFloder = mainJSPath+'/../../out';
	parseRawLogFolder(jsonLogFloder);

	var momentEnd = moment();
	var seconds = parseFloat(momentEnd.diff(momentBegin))/1000;
	console.log(chalk.green("\t\t\tDecision consuming:"+seconds+" seconds"));
	console.log(chalk.green(
		"\t\t\tGoodByeTrendMicro iOS dynamic sandbox Decision System \r\n\t\t\tsilvermoonsecurity, moony @Flyic 2017 "+moment().format("YYYY-MM-DD HH:mm:ss") ));
}


function saveDecisions(decisionFilePath, info)
{
	var fs = require('fs');
	var path = require('path');
    fs.writeFileSync(decisionFilePath, JSON.stringify(info), {flag: 'w+'});
	console.log(chalk.yellow("saveDecisions:\t info:"));
	console.log(chalk.red(pd.json(info)));	
	console.log("saveDecisions:\t to %s successuflly!", decisionFilePath); 

}

function parseRawLogFile(filePath)
{

	var decisionArray = new Array();
	var fs = require('fs');
	var path = require('path');
	var fsJson = fs.readFileSync(filePath, 'utf8');
	
	var linesJson = fsJson.split(/\r?\n/);
	for (var i=0;i<linesJson.length;i++)
	{
	  if (linesJson[i].length>0)
	  {
		  var jsonObj = JSON.parse(linesJson[i]);
		  console.log("\r\nparseRawLogFile:\tProcessing log %d/%d:",i,linesJson.length-1);
		  console.log(chalk.green(pd.json(jsonObj)));	
		  parseOneRawLogJson(jsonObj, decisionArray);
	  }
	}

	var baseName = path.basename(filePath);
	var dirName = path.dirname(filePath);
	var decisionFilePath = path.join(dirName, baseName+"_decision.txt");
	var perFileDecisionInfo = {};
	perFileDecisionInfo.time = new Date();
	perFileDecisionInfo.process=baseName;
	perFileDecisionInfo.logFilePath=filePath;
	perFileDecisionInfo.decisionArray = decisionArray;
	saveDecisions(decisionFilePath, perFileDecisionInfo);

}

function parseRawLogFolder(folderPath)
{
	var rd = require('rd');
	var files = rd.readSync(folderPath);
	var counter = 0;
	rd.eachFileFilterSync(folderPath, /\.json$/, function (f, s)
	{	
  		console.log("%d/%d:\tfilePath:"+f+"\r\nfileStat:", counter, files.length);
  		console.log(s);
  		parseRawLogFile(f);
  		counter = counter +1;
	});


}


function parseOneRawLogJson(jsonObj, decisionArray)
{
	var appstore_jailbreak_check = require('./appstore_jailbreak_check.js');
	var ret = appstore_jailbreak_check.jailbreakcheck(jsonObj);

	if (ret && ret.score)
	{
		decisionArray.push(ret);
	}
} 

})();

exports.main();

 