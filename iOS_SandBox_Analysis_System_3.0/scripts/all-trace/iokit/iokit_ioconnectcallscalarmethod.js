/**
 * Copyright (c) 2017 moony li of @Flyic.
 *2017-05-27

**/


'use strict';



(function() {

var connection = '';
var selector = -1;

var txnType="moony?";
var moduleName="IOKit";
var methodName="IOConnectCallScalarMethod";
var servicename = ''
var resolver = new ApiResolver('module');
var a_method = {};
var input;
var inputCnt;
var inputStruct;
var inputStructCnt;

resolver.enumerateMatches('exports:'+moduleName+"!"+methodName, {
    onMatch: function(match)
    {
        a_method.name = match.name;
        a_method.address = match.address;

        var data = {};
        var send_data = {};
        send_data.time = new Date();
        send_data.txnType = txnType;
        send_data.lib = moduleName;
        send_data.method = methodName;
        send_data.artifact = [];

        data.name = match.name;
        data.value = match.address;
        data.argSeq = -1;
        send_data.artifact.push(data);
        send(JSON.stringify(send_data));
    },
  onComplete: function() {}
});


if (a_method.address)
{
    consoleLog("Interceptor.attach("+a_method.name+":"+a_method.address+")");
    Interceptor.attach(a_method.address,
    {
        onEnter: function(args)
        {
            connection = args[0];
            selector = args[1];
            input = args[2];
            inputCnt = args[3].toInt32();
        },//end of on Enter

        onLeave: function(retval) {
            var connectionName="";
            var send_data = {};
            send_data.time = new Date();
            send_data.txnType = txnType;
            send_data.lib = moduleName;
            send_data.method = methodName;
            send_data.artifact = [];
            //this.context.pc = 0xfff00;
            //this.context.sp = 0x00000;

            var data = {};
            data.name = "connection";
            data.value = connection;
            data.argSeq = 0;
            send_data.artifact.push(data);

            var data = {};
            data.name = "selector";
            data.value = selector;
            data.argSeq = 1;
            send_data.artifact.push(data);

            var data = {};
            data.name = "input";
            data.value = input;
            data.argSeq = 2;
            send_data.artifact.push(data);


            var data = {};
            data.name = "inputCnt";
            data.value = inputCnt;
            data.argSeq = 3;
            send_data.artifact.push(data);


            var backtrace = Thread.backtrace(this.context, Backtracer.FUZZY).map(DebugSymbol.fromAddress);
            //var formatBt = backtrace.toString().replace(new RegExp(",0x","gm"),",\t\n0x");
            consoleLog(getLogHeader()+moduleName+"!"+methodName+"\t"+"call stack:\r\n"+backtrace.toString().replace(new RegExp(",0x","gm"),",\t\n0x"));

            //var data = {};
            //data.name = "formatBt";
            //data.value = formatBt;
            //data.argSeq = -1;
            //send_data.artifact.push(data);
            send(JSON.stringify(send_data));
    }//end of Leave
  });//end of attach

}
else
{
    var data = "resolver.enumerateMatches "+'exports:'+moduleName+"!"+methodName;
    consoleLog(data+" failed!");
}
})();





