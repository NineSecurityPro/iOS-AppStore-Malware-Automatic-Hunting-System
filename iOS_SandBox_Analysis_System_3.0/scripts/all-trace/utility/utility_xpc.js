/**
 * Copyright (c) 2017 moony li of @Flyic.
 *2017-05-27

 2017-08-04 implementation
**/


'use strict';

//pid_t xpc_connection_get_pid(xpc_connection_t connection);
//const char * xpc_connection_get_name(xpc_connection_t connection);

function xpc_get_type(object)
{
    
    var type = Memory.readU32(ptr(object));
    //consoleLog("xpc_get_type:\t0x"+type.toString(16));
    return type;
}

function xpc_connection_get_pid(connection)
{
    return xpc_connection_get_pid_by_address(connection);
    //return  xpc_connection_get_pid_by_raw(connection);
}

function xpc_connection_get_name(connection)
{
    //return xpc_connection_get_name_by_raw(connection);
    return xpc_connection_get_name_by_address(connection);
}

function xpc_connection_get_pid_by_address(connection)
{
    var ret=-1;
    var temp;
    //try
    {
        var fnPtr = Module.findExportByName("libxpc.dylib", "xpc_connection_get_pid");
        if (fnPtr)
        {
            
            var fnNative = new NativeFunction(fnPtr, 'int', ['pointer']);
            if (fnNative)
            {
                
                temp = fnNative(connection);
                //consoleLog("xpc_connection_get_pid:\tfnNative:"+fnNative.toString()+"("+connection+") == "+temp);
                ret = temp;
            }
        }
        if( typeof ret === 'undefined' || ret === null )
        {
            ret = ""
        }
    }
    //catch(e)
    //{
    //  //consoleLog(getLogHeader()+moduleName+"!"+methodName+"\t"+e.stack);
    //}

    consoleLog("xpc_connection_get_pid_by_address:\t"+ret);
    return ret;
}

function xpc_connection_get_pid_by_raw(connection)
{
    var ret=-1;
    var temp;
    var type = xpc_get_type(connection);
    //if (0x3BFD5594 == type)
    {
        ret = Memory.readU32(ptr(parseInt(connection)+0x8c));
    }
    consoleLog("xpc_connection_get_pid_by_raw:\t"+ret);
    return ret;
}





function xpc_connection_get_name_by_raw(connection)
{
    var ret="";
    var temp;
    var type = xpc_get_type(connection);
    //if (0x3BFD5594 == type)
    {
        //var temp = Memory.readU32(ptr(parseInt(connection)+0x24));
        //if (temp == 0)
        {
            ret = readCString(ptr(parseInt(connection)+0xa6));
        }
    }
    consoleLog("xpc_connection_get_name_by_raw:\t"+ret);
    return ret;
}

function xpc_connection_get_name_by_address(connection)
{
    var ret="";
    var temp;

    var fnPtr = Module.findExportByName("libxpc.dylib", "xpc_connection_get_name");
    if (fnPtr)
    {
        
        var fnNative = new NativeFunction(fnPtr, 'pointer', ['pointer']);
        if (fnNative)
        {
            
            temp = fnNative(connection);
            var name =  readCString(temp, 512); 
            //consoleLog("xpc_connection_get_name:\tfnNative:"+fnNative.toString()+"("+connection+") == "+temp+"");
            ret = name;
        }
    }

    if( typeof ret === 'undefined' || ret === null )
    {
        ret = ""
    }
    consoleLog("xpc_connection_get_name_by_address:\t"+ret);
    return ret;
}

