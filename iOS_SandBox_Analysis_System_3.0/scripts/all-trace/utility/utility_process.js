/**
 * Copyright (c) 2017 moony li of @Flyic.
 *2017-05-27

 2017-07-17 implementation
**/


'use strict';

//Summary: libsystem_kernel.dylib`__proc_info
//Summary: libsystem_kernel.dylib`proc_pidpath

//int proc_pidpath(int pid, void * buffer, uint32_t  buffersize)
//int proc_name(int pid, void * buffer, uint32_t buffersize)
//int proc_pidinfo(int pid, int flavor, uint64_t arg,  void *buffer, int buffersize)

//Summary: libsystem_kernel.dylib`__getpid        Address: libsystem_kernel.dylib[0x33ebcf40] (libsystem_kernel.dylib.__TEXT.__text + 77988)
//   pid_t getpid(void);

// Summary: libsystem_pthread.dylib`pthread_threadid_np
//uint64_t tid;
// int   pthread_threadid_np(pthread_t thread, uint64_t *thread_id);


function gettid()
{
    return 0;
    var tid = -1;
    var ret=-1;
    var temp;
    var allocatedBufferSize = 16;
    var allocatedBuffer = Memory.alloc(allocatedBufferSize);
    
    var fnPtr = Module.findExportByName("libsystem_pthread.dylib", "pthread_threadid_np");
    if (fnPtr)
    {
        
        var fnNative = new NativeFunction(fnPtr, 'int', ['int','pointer']);
        if (fnNative)
        {
            
            temp = fnNative(0, allocatedBuffer);
            tid = Memory.readU64(allocatedBuffer);
            //consoleLog("gettid:\tfnNative:"+fnNative.toString()+"(tid=="+tid+") == "+temp);
            ret = tid;
        }
    }
    //consoleLog("getid:\t"+ret);
    return ret;
}

function getpid()
{
    return 0;
    var ret=-1;
    var temp;

    var fnPtr = Module.findExportByName("libsystem_kernel.dylib", "__getpid");
    if (fnPtr)
    {
        
        var fnNative = new NativeFunction(fnPtr, 'int', []);
        if (fnNative)
        {
            
            temp = fnNative();
            //consoleLog("getpid:\tfnNative:"+fnNative.toString()+"() == "+temp);
            ret = temp;
        }
    }
    //consoleLog("getpid:\t"+ret);
    return ret;
}

function proc_name(pid)
{
    return "";
    pid = parseInt(pid);
    //consoleLog("proc_name:\tpid="+pid)
    var ret="";
    var temp;
    var allocatedBufferSize = 256;
    var allocatedBuffer = Memory.alloc(allocatedBufferSize);
    for (var i =0;i<allocatedBufferSize;i++)
    {
        Memory.writeU8(allocatedBuffer.add(i), 0);
    }
    var fnPtr = Module.findExportByName("libsystem_kernel.dylib", "proc_name");
    if (fnPtr)
    {
        //consoleLog("fnptr:"+fnPtr.toString()+"allocatedBuffer:"+allocatedBuffer);
        var fnNative = new NativeFunction(fnPtr, 'int', ['int','pointer','int']);
        if (fnNative)
        {
            
            temp = fnNative(pid, allocatedBuffer, allocatedBufferSize);
            //consoleLog("proc_name:\tfnNative:"+fnNative.toString()+"("+pid+","+allocatedBuffer+","+allocatedBufferSize+") == "+temp);
            
            var procName =  readCString(allocatedBuffer, allocatedBufferSize); 
            ret = procName;
           
        }

    }
    //consoleLog("proc_name:\t"+ret)
    return ret;
}


function proc_pidpath(pid)
{

    return "";
    var ret="";
    var temp;
    var allocatedBufferSize = 1024;
    var allocatedBuffer = Memory.alloc(allocatedBufferSize);
    var fnPtr = Module.findExportByName("libsystem_kernel.dylib", "proc_pidpath");
    if (fnPtr)
    {
        //consoleLog("fnptr:"+fnPtr.toString()+"allocatedBuffer:"+allocatedBuffer);
        var fnNative = new NativeFunction(fnPtr, 'int', ['int','pointer','int']);
        if (fnNative)
        {
            
            temp = fnNative(pid, allocatedBuffer, allocatedBufferSize);
            consoleLog("proc_pidpath:\tfnNative:"+fnNative.toString()+"("+pid+","+allocatedBuffer+","+allocatedBufferSize+") == "+temp);
            
            var pidPath =  readCString(allocatedBuffer, allocatedBufferSize); 
            consoleLog("proc_pidpath:\tpidPath=:"+pidPath);
            //str_body.raw = hexify(hexdump(buf));
            ret = pidPath;
           
        }

    }
    consoleLog("proc_pidpath:\t"+ret)
    return ret;
}

 