/**
 * Copyright (c) 2017 moony li of @Flyic.
 *2017-05-27

 2017-08-22 implementation
**/


'use strict';

var service_globle;

 function iokit_get_class_by_object(service)
{
    service_globle = service;
    var ret="";
    var temp;

    var fnPtr = Module.findExportByName("IOKit", "IOObjectGetClass");
    var classnameSize = 128;
    var classname = Memory.alloc(classnameSize);

    if (fnPtr)
    {

        var fnNative = new NativeFunction(fnPtr, 'int', ['pointer', 'pointer']);
        if (fnNative)
        {

            temp = fnNative(service, classname);
            var name = readCString(classname, 128);
            consoleLog("IOObjectGetClass:\tfnNative:"+fnNative.toString()+"("+service+") == "+name+"");
            ret = name;
        }
    }

    if( typeof ret === 'undefined' || ret === null )
    {
        ret = ""
    }
    return ret;
}


 function iokit_get_class_by_connection(connection)
{
    var ret="";
    var temp;

    var fnPtr = Module.findExportByName("IOKit", "IOConnectGetService");

    //var serviceSize = 0xfff;
    //var service_s = Memory.alloc(serviceSize);
    var service_s=0;
    consoleLog("IOConnectGetService00 : == "+service_s+"");


    //consoleLog("IOConnectGetService00 : == "+service_ptr+"");
    if (fnPtr)
    {

        consoleLog("IOConnectGetService11:\t"+"("+connection+") == "+connection+"");

        var fnNative = new NativeFunction(fnPtr, 'int', ['pointer', 'pointer']);

            consoleLog("IOConnectGetService:\tfnNative:"+fnNative.toString());
        if (fnNative)
        {

            var service_ptr = ptr(service_s);
            //temp = fnNative(connection, service_s);
            temp = fnNative(connection, service_ptr);
            consoleLog("IOConnectGetService22:\t"+ service_ptr + ": temp=" + temp);


            //note: uncomplete
            var serviceobj18 = Memory.readByteArray(service_ptr, 0xfff);
            console.log(hexdump(serviceobj18, {
                                  offset: 0,
                                  length: 0xfff,
                                  header: true,
                                  ansi: true
                                }));

            /*


            var serviceobj9 = Memory.readU64(service_s);
            consoleLog("IOConnectGetService readS64:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj9+"");

            var serviceobj18 = Memory.readByteArray(service_s,256);

                var buf1 = new ArrayBuffer(serviceobj18);
                var dataView1 = new DataView(buf1);
            consoleLog("IOConnectGetService readInt:\tfnNative:"+fnNative.toString()+"("+connection+") == "+dataView1.getUint32(0)+"");

            var service_ptr = new NativePointer(service_s);
            if (service_ptr.isNull())
            {
                   consoleLog("IOConnectGetService11:\t"+"("+service_ptr+") == is null");
            }
            else
            {
                consoleLog("IOConnectGetService11:\t"+"("+service_ptr+") == is not null " + service_ptr);


                var serviceobj15 = Memory.readByteArray(service_ptr,256);
                var buf = new ArrayBuffer(serviceobj15);
                var dataView = new DataView(buf);
                     // 0
                consoleLog("IOConnectGetService readInt:\tfnNative:"+fnNative.toString()+"("+connection+") == "+dataView.getUint32(0)+"");

                var serviceobj7 = Memory.readInt(service_ptr);
                consoleLog("IOConnectGetService readInt:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj7+"");


                var serviceobj8 = Memory.readU8(service_ptr);
                consoleLog("IOConnectGetService readInt:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj8+"");

                var serviceobj9 = Memory.readU16(service_ptr);
                consoleLog("IOConnectGetService readInt:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj9+"");

                var serviceobj10 = Memory.readU32(service_ptr);
                consoleLog("IOConnectGetService readInt:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj10+"");

                var serviceobj11 = Memory.readUShort(service_ptr);
                consoleLog("IOConnectGetService readInt:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj11+"");

                var serviceobj12 = Memory.readUInt(service_ptr);
                consoleLog("IOConnectGetService readInt:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj12+"");

                var serviceobj13 = Memory.readDouble(service_ptr);
                consoleLog("IOConnectGetService readInt:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj13+"");



            }
            */
            /*

            var serviceobj = Memory.readPointer(service_ptr);
            consoleLog("IOConnectGetService readPointer:\tfnNative:"+fnNative.toString()+"("+connection+") == "+service_ptr.toString+ "  serviceobj="+ serviceobj+"");

            var serviceobj4 = Memory.readS8(service_ptr);
            consoleLog("IOConnectGetService readS8:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj4+"");

            var serviceobj5 = Memory.readS16(service_ptr);
            consoleLog("IOConnectGetService readS16:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj5+"");

            var serviceobj6 = Memory.readS32(service_ptr);
            consoleLog("IOConnectGetService readS32:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj6+"");


            var serviceobj7 = Memory.readInt(service_ptr);
            consoleLog("IOConnectGetService readInt:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj7+"");

            var serviceobj8 = Memory.readFloat(service_ptr);
            consoleLog("IOConnectGetService readFloat:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj8+"");
Memory.readU64(
            var serviceobj9 = Memory.readS64(service_ptr);
            consoleLog("IOConnectGetService readS64:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj9+"");

            var serviceobj10 = Memory.readLong(service_ptr);
            consoleLog("IOConnectGetService readLong:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj10+"");

            var serviceobj11 = Memory.readULong(service_ptr);
            consoleLog("IOConnectGetService readULong:\tfnNative:"+fnNative.toString()+"("+connection+") == "+serviceobj11+"");
            */

            var name1 = iokit_get_class_by_object(service_s);
            consoleLog("IOConnectGetService:\tfnNative:"+fnNative.toString()+"("+connection+") == "+name1+"")
            var name2 = iokit_get_class_by_object(service_ptr);
            consoleLog("IOConnectGetService:\tfnNative:"+fnNative.toString()+"("+connection+") == "+name2+"");
            ret = name;
        }
    }

    if( typeof ret === 'undefined' || ret === null )
    {
        ret = ""
    }
    return ret;
}

 function iokit_object_is_equal(connection)
{
    var ret="";
    var temp;

    var fnPtr = Module.findExportByName("IOKit", "IOObjectIsEqualTo");
    consoleLog("IOObjectIsEqualTo:\nfnPtr:"+ fnPtr);
    var classnameSize = 128;
    var classname = Memory.alloc(classnameSize);

    if (fnPtr)
    {

        var fnNative = new NativeFunction(fnPtr, 'int', ['pointer', 'pointer']);
        consoleLog("IOObjectIsEqualTo-fnNative:\tfnNative:"+ fnNative);
        if (fnNative)
        {

            temp = fnNative(connection, connection);
            //var name =  readCString(classname, 128);
            consoleLog("IOObjectIsEqualTo:\tfnNative:"+fnNative.toString()+"("+connection+") == "+temp+"");
            //ret = name;
        }
    }

    if( typeof ret === 'undefined' || ret === null )
    {
        ret = ""
    }
    consoleLog("iokit_get_class_by_object:\t"+ret);
    return ret;
}
