/**
 * Copyright (c) 2017 moony li of @Flyic.
 *2017-05-27

 2017-07-17 implementation
**/


'use strict';

 // int fcntl(int fd, int cmd, ... /* arg */ );

var g_max_read_write=512;

function fcntl_get_path(sockfd)
{
    var ret="";
    var filePath="";
    var allocedfilePathSize = 512;
    var allocedfilePath = Memory.alloc(allocedfilePathSize);

    var fcntlPtr = Module.findExportByName("libsystem_kernel.dylib", "__fcntl");
    //var fcntlPtr = Module.findExportByName("libsystem_kernel.dylib", "fstat");
    if (fcntlPtr)
    {
        //consoleLog("__fcntl:"+fcntlPtr.toString()+"allocedfilePath:"+allocedfilePath);
        var fcntl = new NativeFunction(fcntlPtr, 'int', ['int', 'int','pointer']);
        if (fcntl)
        {
            //moony:
            //Dumplicate fd in case of reference count issue
            //var dupFd = (new NativeFunction(Module.findExportByName("libsystem_kernel.dylib", "dup"), 'int', ['int']))(sockfd);
            //consoleLog("sockfd:"+sockfd+"->dupFd:"+dupFd);
            //#define F_GETPATH       50 
            //ret = fcntl(dupFd,50,allocedfilePath);
            ret = fcntl(sockfd, 50, allocedfilePath);
            //var closeRet = (new NativeFunction(Module.findExportByName("libsystem_kernel.dylib", "close"), 'int', ['int']))(dupFd);
            //consoleLog("close("+dupFd+")="+closeRet);
            consoleLog("fcntl:"+fcntl.toString()+"("+sockfd+",12,"+allocedfilePath+") == "+ret);
            
            /*
            var buf = Memory.readByteArray(allocedfilePath, allocedfilePathSize);
            var dumpBuf = hexdump(buf, {
              offset: 0,
              length: allocedfilePathSize,
              header: false,
              ansi: false
            });
            */
            filePath =  readCString(allocedfilePath, allocedfilePathSize); 
            //str_body.raw = hexify(hexdump(buf));
            consoleLog("fcntl_get_path("+sockfd+"):"+filePath+"\r\n");
            ret = filePath;
        }
        else
        {
            //consoleLog("NativeFunction failed");
        }


    }
    return ret;
    
}
  